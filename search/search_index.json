{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Roda is a Roblox Studio plugin designed to edit structured data in ModuleScripts, which can serve as a backend database system for any in-game items or elements. While you can edit ModuleScripts directly in Roblox Studio to achieve the same result, Roda offers a user-friendly UI with faster, more efficient methods and convenient features to manage and modify a wide variety of game components, including:</p> List <ul> <li>Items (e.g., weapons, armor, consumables, tools, currency, collectibles)</li> <li>Dialogs (e.g., NPC conversations, quest prompts, player interactions)</li> <li>NPCs (e.g., characters, enemies, merchants, quest givers, guards)</li> <li>Skills (e.g., player abilities, magic spells, combat moves, crafting recipes)</li> <li>Quests (e.g., objectives, rewards, progression stages, prerequisites)</li> <li>Player Data (e.g., stats, inventory, progress, achievements, preferences)</li> <li>Buffs (e.g., speed boosts, damage increase, healing over time, stat enhancements)</li> <li>Debuffs (e.g., slow effects, damage reduction, poison, confusion, stat penalties)</li> <li>Status Effects (e.g., stun, freeze, burn, invisibility, regeneration)</li> <li>Challenges (e.g., timed trials, obstacle courses, boss battles, survival modes)</li> <li>Perks (e.g., passive abilities, bonus rewards, unique traits, class-specific bonuses)</li> <li>Power-Ups (e.g., temporary boosts, invincibility, double jump, speed surges)</li> <li>Environments (e.g., terrain settings, weather conditions, lighting configurations)</li> <li>Vehicles (e.g., cars, boats, planes, mounts, mechanisms)</li> <li>Effects (e.g., visual effects, sound effects, particle systems, animations)</li> <li>Shops (e.g., item listings, prices, stock, discounts, purchase logic)</li> <li>Events (e.g., in-game events, seasonal activities, scripted triggers)</li> <li>Loot Tables (e.g., drop rates, rare items, randomized rewards)</li> <li>Furniture/Decor (e.g., placeable objects, room layouts, aesthetic items)</li> <li>Weapons (e.g., melee, ranged, magical, unique properties, upgrades)</li> <li>Armor (e.g., defensive gear, bonuses, set effects, durability)</li> <li>Tools (e.g., building tools, farming tools, utility items)</li> <li>Currency (e.g., gold, tokens, premium currency, tradeable items)</li> <li>Collectibles (e.g., badges, trophies, rare artifacts, trading cards)</li> <li>Crafting Recipes (e.g., materials required, output items, skill levels)</li> <li>Leaderboards (e.g., scores, rankings, player stats)</li> <li>Achievements (e.g., unlock conditions, rewards, display names)</li> <li>AI Behaviors (e.g., patrol routes, combat patterns, interaction scripts)</li> <li>Soundscapes (e.g., ambient sounds, music tracks, sound triggers)</li> <li>Particle Systems (e.g., fire, smoke, water, magic effects)</li> <li>Animations (e.g., character movements, attack sequences, idle poses)</li> <li>UI Elements (e.g., menus, buttons, HUD components, tooltips)</li> <li>Triggers (e.g., area triggers, item pickups, event starters)</li> <li>Maps/Zones (e.g., level layouts, boundaries, teleport points)</li> <li>Economy Systems (e.g., trade systems, market prices, inflation controls)</li> <li>Social Features (e.g., friend lists, guilds, chat systems, party mechanics)</li> </ul> <p>Most of the plugin\u2019s functions are intuitive and self-explanatory, requiring little to no documentation. However, there are certain features and processes that occur in the background, which may not be immediately or fully visible in the user interface. Understanding these can enhance your experience and productivity. Additionally, the documentation includes examples to help you get started quickly.</p> <p> Roda Tutorial</p> <p> Dev Forum Post</p> <p> Get Roda on the Roblox Creator Hub Store</p> <p> For support &amp; feedback join Roda's Guilded server</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Getting started with Roda is straightforward and intuitive. Simply watch the introduction video:</p> <p> Get Roda on the Roblox Creator Hub Store</p> <p> For support &amp; feedback join Roda's Guilded server</p>"},{"location":"pages/editor/","title":"Editor","text":""},{"location":"pages/editor/#edit-data","title":"Edit Data","text":"<ul> <li>This is where you can edit data, including adding, modifying, deleting, and restoring items.</li> </ul> <p>Restore Items</p> <p>Deleted items are stored in a dedicated table linked to the data file configuration. However, if any property in the data file configuration is modified, the deleted items table for that configuration will be cleared to prevent conflicts.</p> <p>--</p>"},{"location":"pages/editor/#search","title":"Search","text":"<ul> <li>The search tab on the Editor page lets you find items in your data file. Set conditions by using logical (AND/OR) and relational operators (e.g., ==, &gt;, &lt;) and insert the values to find matching items.</li> </ul>"},{"location":"pages/editor/#tabs","title":"Tabs","text":"<ul> <li>For Dropdown UI Elements, there\u2019s an option in the 'Data File Settings' to display them as additional tabs on the editor page. This feature allows you to click on a value within the tab to list all associated items.</li> </ul>"},{"location":"pages/examples-complex-types/","title":"Types","text":"<p>To ensure compatibility with Roblox DataStore, Roda only supports primitive data types (strings, numbers, booleans). Having nested tables and complex types at runtime in your table can be achieved very easy using the provided code generation.</p> <p>If for some reasons you don't want to use the code generation, here are some basic examples of converting primitives into complex Roblox types. </p>"},{"location":"pages/examples-complex-types/#color3","title":"Color3","text":"Server.lua  Items.lua  Colors.lua Script<pre><code>local colors = require(game.ReplicatedStorage.Colors)   -- Adjust as needed\nlocal items = require(game.ReplicatedStorage.Items)     -- Adjust as needed\n\nfor _, item in pairs(items) do    \n    local colorData = colors[item.colorKey] or error(\"Color not found: \" .. item.colorKey)\n\n    item.color = Color3.fromRGB(colorData.R, colorData.G, colorData.B) \nend\n</code></pre> ModuleScript<pre><code>local items = {\n    {\n        id = 1,\n        colorKey = \"orange\",\n        -- ..\n    },\n}\n\nreturn items\n</code></pre> ModuleScript<pre><code>local colors = {\n    [\"orange\"] = {\n        colorKey = \"orange\",\n        R = 255,\n        G = 176,\n        B = 0,\n    },\n}\n\nreturn colors\n</code></pre>"},{"location":"pages/examples-complex-types/#vector3","title":"Vector3","text":"Server.lua  Items.lua  Positions.lua Script<pre><code>local positions = require(game.ReplicatedStorage.Positions) -- Adjust as needed\nlocal items = require(game.ReplicatedStorage.Items)         -- Adjust as needed\n\nfor _, item in pairs(items) do    \n    local pos = positions[item.posKey] or error(\"Position not found: \" .. item.posKey)\n\n    item.position = Vector3.new(pos.X, pos.Y, pos.Z)\nend\n</code></pre> ModuleScript<pre><code>local items = {\n    {\n        id = 1,\n        posKey = \"startPosition\",\n        -- ..\n    },\n    {\n        id = 2,\n        posKey = \"endPosition\",\n        -- ..\n    },\n}\n\nreturn items\n</code></pre> ModuleScript<pre><code>local positions = {\n    [\"startPosition\"] = {\n        posKey = \"startPosition\",\n        X = 10,\n        Y = 5,\n        Z = 0,\n    },\n    [\"endPosition\"] = {\n        posKey = \"endPosition\",\n        X = 15,\n        Y = 8,\n        Z = 0,\n    },\n}\n\nreturn positions\n</code></pre>"},{"location":"pages/examples-complex-types/#vector2","title":"Vector2","text":"Server.lua  Items.lua  Sizes.lua Script<pre><code>local sizes = require(game.ReplicatedStorage.Sizes)      -- Adjust as needed\nlocal items = require(game.ReplicatedStorage.Items)      -- Adjust as needed\n\nfor _, item in pairs(items) do    \n    local sizeData = sizes[item.sizeKey] or error(\"Size not found: \" .. item.sizeKey)\n\n    item.size = Vector2.new(sizeData.X, sizeData.Y) \nend\n</code></pre> ModuleScript<pre><code>local items = {\n    {\n        id = 1,\n        sizeKey = \"uiSize\",\n        -- ..\n    },\n    {\n        id = 2,\n        sizeKey = \"iconSize\",\n        -- ..\n    },\n}\n\nreturn items\n</code></pre> ModuleScript<pre><code>local sizes = {\n    [\"uiSize\"] = {\n        sizeKey = \"uiSize\",\n        X = 50,\n        Y = 100,\n    },\n    [\"iconSize\"] = {\n        sizeKey = \"iconSize\",\n        X = 30,\n        Y = 30,\n    },\n}\n\nreturn sizes\n</code></pre>"},{"location":"pages/examples-complex-types/#udim2","title":"UDim2","text":"Server.lua  Items.lua  UISizes.lua Script<pre><code>local uiSizes = require(game.ReplicatedStorage.UISizes) -- Adjust as needed\nlocal items = require(game.ReplicatedStorage.Items)     -- Adjust as needed\n\nfor _, item in pairs(items) do    \n    local sizeData = uiSizes[item.sizeKey] or error(\"UISize not found: \" .. item.sizeKey)\n\n    item.size = UDim2.new(sizeData.ScaleX, sizeData.OffsetX, sizeData.ScaleY, sizeData.OffsetY) \nend\n</code></pre> ModuleScript<pre><code>local items = {\n    {\n        id = 1,\n        sizeKey = \"buttonSize\",\n        -- ..\n    },\n    {\n        id = 2,\n        sizeKey = \"panelSize\",\n        -- ..\n    },\n}\n\nreturn items\n</code></pre> ModuleScript<pre><code>local uiSizes = {\n    [\"buttonSize\"] = {\n        sizeKey = \"buttonSize\",\n        ScaleX = 0.5,\n        ScaleY = 0.5,\n        OffsetX = 0,\n        OffsetY = 0,\n    },\n    [\"panelSize\"] = {\n        sizeKey = \"panelSize\",\n        ScaleX = 0.8,\n        ScaleY = 0.8,\n        OffsetX = 0,\n        OffsetY = 0,\n    },\n}\n\nreturn uiSizes\n</code></pre>"},{"location":"pages/examples-complex-types/#udim","title":"UDim","text":"Server.lua  Items.lua  UIScales.lua Script<pre><code>local uiScales = require(game.ReplicatedStorage.UIScales)   -- Adjust as needed\nlocal items = require(game.ReplicatedStorage.Items)         -- Adjust as needed\n\nfor _, item in pairs(items) do    \n    local scaleData = uiScales[item.scaleKey] or error(\"UIScale not found: \" .. item.scaleKey)\n\n    item.size = UDim.new(scaleData.Scale, scaleData.Offset) \nend\n</code></pre> ModuleScript<pre><code>local items = {\n    {\n        id = 1,\n        scaleKey = \"buttonScale\",\n        -- ..\n    },\n    {\n        id = 2,\n        scaleKey = \"panelScale\",\n        -- ..\n    },\n}\n\nreturn items\n</code></pre> ModuleScript<pre><code>local uiScales = {\n    [\"buttonScale\"] = {\n        scaleKey = \"buttonScale\",\n        Scale = 0.5,\n        Offset = 0,\n    },\n    [\"panelScale\"] = {\n        scaleKey = \"panelScale\",\n        Scale = 0.8,\n        Offset = 0,\n    },\n}\n\nreturn uiScales\n</code></pre>"},{"location":"pages/examples-complex-types/#cframe","title":"CFrame","text":"Server.lua  Items.lua  CFrames.lua Script<pre><code>local cFrames = require(game.ReplicatedStorage.CFrames)   -- Adjust as needed\nlocal items = require(game.ReplicatedStorage.Items)       -- Adjust as needed\n\nfor _, item in pairs(items) do    \n    local cFrameData = cFrames[item.cFrameKey] or error(\"CFrame not found: \" .. item.cFrameKey)\n\n    item.cFrame = CFrame.new(cFrameData.PositionX, cFrameData.PositionY, cFrameData.PositionZ) \n        * CFrame.fromEulerAngles(math.rad(cFrameData.RotationX), math.rad(cFrameData.RotationY), math.rad(cFrameData.RotationZ)) \nend\n</code></pre> ModuleScript<pre><code>local items = {\n    {\n        id = 1,\n        cFrameKey = \"objectPosition1\",\n        -- ..\n    },\n    {\n        id = 2,\n        cFrameKey = \"objectPosition2\",\n        -- ..\n    },\n}\n\nreturn items\n</code></pre> ModuleScript<pre><code>local cFrames = {\n    [\"objectPosition1\"] = {\n        cFrameKey = \"objectPosition1\",\n        PositionX = 0,\n        PositionY = 5,\n        PositionZ = 0,\n        RotationX = 45, -- In degrees\n        RotationY = 0,\n        RotationZ = 0,\n    },\n    [\"objectPosition2\"] = {\n        cFrameKey = \"objectPosition2\",\n        PositionX = 10,\n        PositionY = 8,\n        PositionZ = 5,\n        RotationX = 0,\n        RotationY = 0,\n        RotationZ = 90, -- In degrees\n    },\n}\n\nreturn cFrames\n</code></pre>"},{"location":"pages/examples-export-import-gs/","title":"Example - Google Sheets API","text":"<p>An example of setting up a basic Python API to import/export data from/to Roda and communicate with Google Sheets.</p> PrerequisitesGoogle Sheets CredentialsCreate the API <ul> <li>Install Python (set PATH while installation)</li> <li>Install VS Code</li> <li>Obtain Google Sheets Credentials (see next Tab)</li> </ul> <ul> <li>Create a folder for the API (e.g.: c:\\dev\\roda-api)</li> <li>Open that Folder in VS Code</li> <li>Open Terminal in VS Code and create the python virtual environment     <pre><code>python -m venv venv\n</code></pre></li> <li>Run the virtual environment     <pre><code>venv\\Scripts\\activate\n</code></pre></li> <li>Install the required libraries     <pre><code>pip install flask gspread oauth2client\n</code></pre></li> <li>Inside your api folder (e.g.: c:\\dev\\roda-api) create the a python file (e.g.: api.py)</li> <li> <p>Paste in the code and adjust the variables as needed:</p> api.py <pre><code>import json  # Imports the JSON library for handling JSON data\nimport gspread  # Imports the gspread library for interacting with Google Sheets\nfrom flask import Flask, request, jsonify, make_response  # Imports Flask components for creating the API\nfrom oauth2client.service_account import ServiceAccountCredentials  # Imports credentials handler for Google Sheets authentication\n\n# Adjustable variables for users to customize the API\nPATH_CREDENTIALS = 'c:/path_to_creds/credentials_file_we_downloaded_earlier.json'  # Set the file path for Google Sheets credentials\nSPREADSHEET_KEY = 'SPREADSHEET_ID_HERE'  # Adjust the Google Sheets spreadsheet ID\nHOST_PORT = 5000  # Specifies the port number for the Flask app to run on\n\napp = Flask(__name__)  # Creates a Flask application instance for the API\n\n# Set up Google Sheets client for authentication and access\nscope = ['https://www.googleapis.com/auth/spreadsheets']  # Defines the scope for Google Sheets API access (read/write)\ncredentials = ServiceAccountCredentials.from_json_keyfile_name(PATH_CREDENTIALS, scope)  # Loads credentials from the JSON file with the specified scope\ngc = gspread.authorize(credentials)  # Authorizes gspread to use the credentials for Google Sheets interactions\n\n# Import Google Sheets data to Roda as JSON via GET request\n@app.route('/import', methods=['GET'])\ndef import_sheets_to_roda():\n    print('Importing data from Google Sheets')\n    print(\"\\n---------- HTTP Headers ----------\")\n    print(request.headers)\n\n    try:\n        sheet = gc.open_by_key(SPREADSHEET_KEY).sheet1  # Opens the Google Sheet using the spreadsheet key and first sheet\n        all_data = sheet.get_all_values()  # Retrieves all values from the Google Sheet as a list of rows\n\n        print(\"\\n---------- All Data from Google Sheets ----------\")\n        print(all_data)\n\n        if all_data:  # Checks if there\u2019s any data in the sheet\n            headers = all_data[0]  # Assigns the first row as headers\n            data = all_data[1:]  # Assigns remaining rows as data, excluding headers\n        else:  # Handles an empty sheet\n            headers, data = [], []  # Sets empty lists for headers and data if no data exists\n\n        roda_data = []  # Initializes an empty list to hold data\n        print(\"\\n---------- Headers ----------\")\n        print(headers) \n\n        for row in data:  # Iterates through each row of data\n            if len(row) == len(headers) and any(cell.strip() for cell in row):  # Ensures the row length matches headers and contains non-empty data\n                row_dict = {headers[i]: row[i] for i in range(len(headers)) if row[i].strip()}  # Creates a dictionary from headers and row values, excluding empty values\n                if row_dict:  # Ensures the dictionary isn\u2019t empty\n                    roda_data.append(row_dict)  # Adds the dictionary to the Roda data list\n\n        print(\"\\n-------------- Roda Data -----------------\")\n        print(roda_data)\n\n        return jsonify(roda_data), 200  # Returns the Roda data as JSON with a 200 OK status\n    except Exception as e:  # Catches any errors during the import process\n        return jsonify({'status': 'error', 'message': str(e)}), 500  # Returns an error response with the exception message and a 500 Internal Server Error status\n\n# Export Roda JSON data to Google Sheets via POST request\n@app.route('/export', methods=['POST'])\ndef export_data_to_sheet():\n    print(\"\\n---------- HTTP Headers ----------\")\n    print(request.headers)\n\n    data = request.get_json()  # Retrieves JSON data from the POST request body\n    if not data:  # Checks if no data was provided\n        return make_response(jsonify({\"error\": \"No data provided\"}), 400)  # Returns a 400 Bad Request response if data is missing\n\n    try:\n        sheet = gc.open_by_key(SPREADSHEET_KEY).sheet1  # Opens the Google Sheet using the default spreadsheet key and first sheet\n        sheet.clear()  # Clears all existing data in the sheet before exporting new data\n\n        print(\"\\n---------------- Data for Export ----------------\")\n        print(data)\n\n        # Standardize data format\n        if isinstance(data, dict):  # Checks if the data is a dictionary\n            data = list(data.values())  # Converts the dictionary values into a list of dictionaries for processing\n\n        if isinstance(data, list) and all(isinstance(item, dict) for item in data):  # Ensures data is a list of dictionaries\n            headers = sorted(data[0].keys()) if data else []  # Extracts and sorts headers from the first dictionary, or sets empty if no data\n            print(\"\\n-------------- Headers -----------------\")\n            print(headers)\n\n            rows = [[item.get(header, \"\") for header in headers] for item in data]  # Creates a list of rows from the data, filling missing values with empty strings\n            print(\"\\n-------------- Rows -----------------\")\n            print(rows)\n        else:  # Handles invalid data format\n            return make_response(jsonify({\"error\": \"Invalid data format\"}), 400)  # Returns a 400 Bad Request response if data format is wrong\n\n        # Prepare complete data to upload in one call\n        complete_data = [headers] + rows  # Combines headers and rows into a single list for Google Sheets\n        sheet.append_rows(complete_data, value_input_option='USER_ENTERED')  # Appends all rows to the Google Sheet, preserving formats as entered by a user\n\n        return jsonify({\"success\": True, \"message\": \"Data exported successfully\"})  # Returns a success response with a confirmation message\n    except Exception as e:  # Catches any errors during the export process\n        return jsonify({'status': 'error', 'message': str(e)}), 500  # Returns an error response with the exception message and a 500 Internal Server Error status\n\nif __name__ == '__main__':  # Entry point for running the Flask app\n    app.run(debug=True, port=HOST_PORT)  # Starts the Flask application in debug mode on the specified port\n</code></pre> </li> <li> <p>Run the API     <pre><code>python .\\api.py\n</code></pre></p> </li> <li>You can now use the endpoints to export/import data in Roda<ul> <li><code>http://localhost:5000/export</code></li> <li><code>http://localhost:5000/import</code></li> <li>Test the export</li> <li>Change some data in your spreadsheet and test the import</li> </ul> </li> </ul>"},{"location":"pages/examples-export-import-gs/#obtaining-google-sheets-credentials-file-and-required-permissions","title":"Obtaining Google Sheets Credentials File and Required Permissions","text":"<ol> <li> <p>Create a Google Cloud Project</p> <ul> <li>Go to the Google Cloud Console</li> <li>Sign in with your Google account (ensure it\u2019s the account you\u2019ll use for Google Sheets access).</li> <li>Click the \"Select a Project\" button (top left) and click \"New Project\" in the popup.</li> <li>Name your project (e.g., \"RodaSheetsAPI\"), click \"Create,\" and wait for it to set up.</li> </ul> </li> <li> <p>Enable the Google Sheets API</p> <ul> <li>In the Google Cloud Console, navigate to \"APIs &amp; Services\" &gt; \"Library\".</li> <li>Search for \"Google Sheets API\", select it, and click \"Enable\" to activate it for your project.</li> </ul> </li> <li> <p>Create a Service Account</p> <ul> <li>Go to \"APIs &amp; Services\" &gt; \"Credentials\" in the Google Cloud Console.</li> <li>Click \"+ Create Credentials\" &gt; \"Service account\".</li> <li>Enter a \"Service account name\" (e.g., \"RodaServiceAccount\").</li> <li>Click \"Create and Continue\".</li> <li>Skip the \"Grant this service account access to project\" step (optional permissions can be added later if needed).</li> <li>Click \"Done\" to create the service account.</li> <li>You\u2019ll see the service account listed. Note the email address, you\u2019ll need it later.</li> </ul> </li> <li> <p>Generate a JSON Key for the Service Account</p> <ul> <li>From the service account list, click on the service account you created.</li> <li>Go to the \"Keys\" tab, then click \"Add Key\" &gt; \"Create new key\".</li> <li>Select \"JSON\" as the key type and click \"Create\".</li> <li>A JSON file will download automatically. Save this file securely.</li> <li>This JSON file contains the credentials (client email, private key, etc.) needed for your Python script to authenticate with Google Sheets.</li> </ul> </li> <li> <p>Share the Google Sheet with the Service Account</p> <ul> <li>Go to Google Sheets and create a new file (Blank spreadsheet).</li> <li>Note the sheetId from the url: https://docs.google.com/spreadsheets/d/THIS_PART/edit</li> <li>Click the \"Share\" button (top-right corner).</li> <li>Add the service account email (service account email we noted earlier) as an editor.</li> <li>Set the permission to \"Editor\"</li> <li>Click \"Send\" or \"Done\" to grant access.</li> </ul> </li> <li> <p>Required Permissions and Rights</p> <ul> <li>Use the scope https://www.googleapis.com/auth/spreadsheets for read/write access to Google Sheets.</li> <li> <p>In the Python script (see next Tab), ensure the scope variable includes the above value when authorizing with gspread:</p> <pre><code>scope = ['https://www.googleapis.com/auth/spreadsheets']\n</code></pre> </li> </ul> </li> <li> <p>Use the Credentials in the Python Script</p> <ul> <li>Update your PATH_CREDENTIALS in the Python script to point to the JSON file\u2019s location (e.g., c:/path_to_creds/credentials_file_we_downloaded_earlier.json).</li> </ul> </li> <li> <p>Done</p> <ul> <li>Set up the script (next tab) and run your API.</li> </ul> </li> </ol>"},{"location":"pages/examples-modulescripts-as-database/","title":"Example - ModuleScript as DB","text":"<p>This section provides a beginner-friendly example of using a ModuleScript in Roblox as a simple database for storing and managing game data, demonstrating how to set up, populate, and interact with data in a Roblox game.</p> <ul> <li> Create a new experience in Roblox Studio</li> <li> Create a ModuleScript in ServerStorage and name it \"Items\"</li> <li> Create a new Project in Roda</li> <li> Create a new Data File Configuration</li> <li> Pick the Items ModuleScript as the Data File</li> <li> Set the Table Type to Dict</li> <li> Add properties to the Data File Settings<ul> <li> Click \"Add From Code\", paste the following Lua snippet, and click \"Parse\":     <pre><code>name = \"name\"\nvalue = 0\nimage = \"image\"\n</code></pre></li> <li> Set the UI Element of image property to \"T.Box with Image Selection\"</li> </ul> </li> <li> Upload some images (if you don\u2019t have any, find free images on websites like Craftpix)</li> <li> Insert the images and move them into a Folder</li> <li> Set this Folder as Image Pool in the Data File Settings</li> <li> Add some items on the Editor Page</li> <li> <p> Create the scripts, run the game, stop, edit items, run again...</p>  Script.lua  LocalScript.lua ServerScriptService.Script<pre><code>-- Load the items data from a ModuleScript located in ServerStorage\nlocal items = require(game.ServerStorage.Items)\n\n-- Create a RemoteEvent for clients to request the items table from the server\nlocal GetItems = Instance.new(\"RemoteEvent\") -- Creates a new RemoteEvent object\nGetItems.Name = \"GetItems\" -- Names it \"GetItems\" for identification\nGetItems.Parent = game.ReplicatedStorage -- Places it in ReplicatedStorage for server-client communication\n\n-- Create a new RemoteEvent for notifying clients when an item is collected\nlocal ItemCollected = Instance.new(\"RemoteEvent\") -- Creates another RemoteEvent object\nItemCollected.Name = \"ItemCollected\" -- Names it \"ItemCollected\" for item collection events\nItemCollected.Parent = game.ReplicatedStorage -- Places it in ReplicatedStorage for server-client communication\n\n-- Handle client requests for the items table\nGetItems.OnServerEvent:Connect(function(player) -- Listens for when a client fires this event\n    GetItems:FireClient(player, items) -- Sends the items table back to the requesting client\nend)\n\n-- System to spawn spheres with GUIs and handle item collection\nlocal spawnAreaSize = 50 -- Defines the size of the 50x50 stud area where spheres spawn\nlocal spawnPoint = game.Workspace:WaitForChild(\"SpawnLocation\").Position or Vector3.new(0, 0, 0) -- Gets the position of SpawnLocation or defaults to (0, 0, 0) if not found\nlocal maxSpheres = 200 -- Sets the maximum number of spheres allowed in the game at once\nlocal sphereCount = 0 -- Tracks the current number of active spheres\n\n-- List of colors for the spheres\nlocal colors = {\n    Color3.fromRGB(255, 99, 51), -- Bright red-orange\n    Color3.fromRGB(255, 105, 180), -- Hot pink\n    Color3.fromRGB(144, 238, 144), -- Light green\n    Color3.fromRGB(230, 69, 217), -- Bright purple\n    Color3.fromRGB(255, 165, 0), -- Orange\n    Color3.fromRGB(255, 255, 62), -- Bright yellow\n    Color3.fromRGB(30, 51, 240), -- Deep blue\n    Color3.fromRGB(88, 255, 249), -- Cyan\n}\n\n-- Create a table of item names (keys) for random selection from the items dictionary\nlocal itemNames = {} -- Initializes an empty table to store item names\nfor name, _ in pairs(items) do -- Loops through the items dictionary to get all keys (item names)\n    table.insert(itemNames, name) -- Adds each item name to the itemNames table\nend\n\n-- Function to spawn a sphere with an invisible outer sphere for touch detection\nlocal function spawnSphere()\n    if sphereCount &gt;= maxSpheres then\n        return\n    end -- Stops spawning if the maximum number of spheres is reached\n\n    local randomItemName = itemNames[math.random(1, #itemNames)] -- Randomly selects an item name from the list\n    local item = items[randomItemName] or error(\"Item not found: \" .. randomItemName) -- Gets the item data or throws an error if not found\n\n    local shapes = { -- List of possible shapes for the sphere\n        Enum.PartType.Ball,\n        Enum.PartType.Block,\n        Enum.PartType.Cylinder,\n        Enum.PartType.Wedge,\n        Enum.PartType.CornerWedge,\n    }\n    local randomShape = shapes[math.random(1, #shapes)] -- Randomly picks a shape from the list\n    local randomColor = colors[math.random(1, #colors)] -- Randomly picks a color from the colors list\n\n    -- Create the visible inner sphere (small, colored)\n    local innerSphere = Instance.new(\"Part\") -- Creates a new Part for the visible sphere\n    innerSphere.Shape = randomShape -- Sets the shape to a random type (e.g., Ball, Block)\n    innerSphere.Size = Vector3.new(1, 1, 1) -- Sets a small size for the visible sphere\n    innerSphere.Position = Vector3.new( -- Sets a random position within the spawn area\n        spawnPoint.X + math.random(-spawnAreaSize / 2, spawnAreaSize / 2), -- Random X position\n        spawnPoint.Y + math.random(5, 25), -- Random Y position (5 to 25 studs above ground) for dropping\n        spawnPoint.Z + math.random(-spawnAreaSize / 2, spawnAreaSize / 2) -- Random Z position\n    )\n    innerSphere.Anchored = false -- Allows the sphere to fall due to physics\n    innerSphere.BrickColor = BrickColor.new(randomColor) -- Applies a random color\n    innerSphere.Parent = game.Workspace -- Places the sphere in the Workspace for visibility\n\n    -- Create an invisible outer sphere for touch detection (larger, transparent)\n    local outerSphere = Instance.new(\"Part\") -- Creates a new Part for the invisible touch detection\n    outerSphere.Shape = Enum.PartType.Ball -- Uses a Ball shape for consistent touch detection\n    outerSphere.Size = Vector3.new(5, 5, 5) -- Sets a larger size for the touch area\n    outerSphere.Position = innerSphere.Position -- Matches the position of the inner sphere\n    outerSphere.Anchored = false -- Allows falling with the inner sphere\n    outerSphere.Transparency = 1 -- Makes it fully invisible\n    outerSphere.CanCollide = false -- Prevents physical collisions, only allowing touch detection\n    outerSphere.Parent = game.Workspace -- Places it in the Workspace\n\n    -- Weld the inner and outer spheres together\n    local weld = Instance.new(\"WeldConstraint\") -- Creates a WeldConstraint to connect the spheres\n    weld.Part0 = innerSphere -- Sets the inner sphere as the base part\n    weld.Part1 = outerSphere -- Sets the outer sphere to follow the inner sphere\n    weld.Parent = innerSphere -- Parents the weld to the inner sphere for management\n\n    -- Add item name as an attribute to the outer sphere (for touch event)\n    outerSphere:SetAttribute(\"ItemId\", item.name) -- Stores the item name as an attribute for identification\n\n    -- Create a BillboardGui for the item display (attached to the inner sphere)\n    local billboardGui = Instance.new(\"BillboardGui\") -- Creates a GUI that displays above the sphere\n    billboardGui.Size = UDim2.new(3, 0, 3, 0) -- Sets the size of the GUI (3x3 studs)\n    billboardGui.StudsOffset = Vector3.new(0, 3, 0) -- Positions the GUI 3 studs above the inner sphere\n    billboardGui.Adornee = innerSphere -- Attaches the GUI to the inner sphere\n    billboardGui.Parent = innerSphere -- Parents the GUI to the inner sphere\n\n    -- Add ImageLabel for the item image\n    local imageLabel = Instance.new(\"ImageLabel\") -- Creates an image label for the item\u2019s image\n    imageLabel.Size = UDim2.new(1, 0, 0.7, 0)\n    imageLabel.Position = UDim2.new(0, 0, 0, 0) -- Positions it at the top-left of the GUI\n    imageLabel.Image = item.image -- Sets the image from the item data\n    imageLabel.BackgroundTransparency = 1 -- Makes the background fully transparent\n    imageLabel.ScaleType = Enum.ScaleType.Fit -- Ensures the image fits within the label while maintaining aspect ratio\n    imageLabel.Parent = billboardGui -- Parents it to the BillboardGui\n\n    -- Add TextLabel for the value\n    local valueLabel = Instance.new(\"TextLabel\") -- Creates a text label for the item\u2019s value\n    valueLabel.Size = UDim2.new(1, 0, 0.3, 0) -- Sets the size to 30% of the GUI height\n    valueLabel.Position = UDim2.new(0, 0, 0.7, 0) -- Positions it below the image (70% down)\n    valueLabel.TextScaled = true -- Scales the text to fit the label\n    valueLabel.Text = \"$ \" .. tostring(item.value) -- Displays the item\u2019s value with a dollar sign\n    valueLabel.TextColor3 = Color3.new(0.666667, 1, 0) -- Sets the text color to green\n    valueLabel.Font = Enum.Font.Cartoon -- Sets the font to a cartoon style for a playful look\n    valueLabel.BackgroundTransparency = 1 -- Makes the background fully transparent\n    valueLabel.Parent = billboardGui -- Parents it to the BillboardGui\n\n    -- Handle outer sphere touch to fire event to client and destroy both spheres\n    outerSphere.Touched:Connect(function(hit) -- Detects when the outer sphere is touched\n        local player = game.Players:GetPlayerFromCharacter(hit.Parent) -- Gets the player who touched the sphere\n        if player and outerSphere and outerSphere.Parent then -- Checks if the player and outer sphere exist\n            outerSphere.CanTouch = false -- Prevents the sphere from being touched multiple times\n            local itemId = outerSphere:GetAttribute(\"ItemId\") -- Retrieves the item name from the attribute\n            if itemId then -- Ensures an item ID exists\n                -- Fire the ItemCollected event to the player with the item data\n                ItemCollected:FireClient(player, items[itemId]) -- Sends the item data to the client\n\n                -- Destroy both spheres immediately\n                if innerSphere and innerSphere.Parent then -- Checks if the inner sphere exists\n                    innerSphere:Destroy() -- Removes the visible inner sphere\n                end\n                if outerSphere and outerSphere.Parent then -- Checks if the outer sphere exists\n                    outerSphere:Destroy() -- Removes the invisible outer sphere\n                    sphereCount = sphereCount - 1 -- Decrements the sphere count\n                end\n            end\n        end\n    end)\n\n    sphereCount = sphereCount + 1 -- Increments the sphere count for each new sphere\nend\n\n-- Spawn spheres continuously (every 0.25 seconds) up to maxSpheres\nspawn(function()\n    while true do -- Runs an infinite loop to keep spawning spheres\n        if sphereCount &lt; maxSpheres then -- Checks if we\u2019re below the maximum number of spheres\n            spawnSphere() -- Calls the function to spawn a new sphere\n        end\n        wait(0.25) -- Pauses for 0.25 seconds before spawning the next sphere\n    end\nend)\n</code></pre> StarterPlayer.StarterPlayerScripts.LocalScript<pre><code>-- Get the local player (the player running this script on their client)\nlocal player = game.Players.LocalPlayer\n\n-- Create a ScreenGui to hold the inventory UI\nlocal gui = Instance.new(\"ScreenGui\") -- Creates a new ScreenGui object\ngui.Name = \"InventoryGui\" -- Names it \"InventoryGui\" for identification\ngui.Parent = player.PlayerGui -- Places it in the player's PlayerGui for client-side UI\n\n-- Create a main frame for the inventory GUI\nlocal frame = Instance.new(\"Frame\") -- Creates a new Frame object for the GUI container\nframe.Name = \"GuiFrame\" -- Names it \"GuiFrame\" for identification\nframe.Size = UDim2.new(0.25, 0, 0.75, 0) -- Sets the size to 25% of the screen width and 75% of the screen height\nframe.Position = UDim2.new(0, 0, 0.25, 0) -- Positions it at the top-left corner (0 from left, 25% from top)\nframe.BackgroundTransparency = 1 -- Makes the background fully transparent\nframe.Parent = gui -- Parents it to the ScreenGui\n\n-- Create a UIListLayout to organize elements vertically in the frame\nlocal layout = Instance.new(\"UIListLayout\") -- Creates a new UIListLayout for layout management\nlayout.FillDirection = Enum.FillDirection.Vertical -- Arranges items vertically\nlayout.HorizontalAlignment = Enum.HorizontalAlignment.Center -- Centers items horizontally\nlayout.VerticalAlignment = Enum.VerticalAlignment.Center -- Centers items vertically\nlayout.SortOrder = Enum.SortOrder.LayoutOrder -- Sorts items based on their LayoutOrder\nlayout.Parent = frame -- Parents it to the frame\n\n-- Create cash label at the top of the frame\nlocal cashLabel = Instance.new(\"TextLabel\") -- Creates a new TextLabel for displaying cash\ncashLabel.Name = \"CashLabel\" -- Names it \"CashLabel\" for identification\ncashLabel.Size = UDim2.new(1, 0, 0.2, 0) -- Sets the size to 100% of the frame width and 20% of its height\ncashLabel.BackgroundTransparency = 1 -- Makes the background fully transparent\ncashLabel.Text = \"Cash: $0\" -- Sets the initial text to show zero cash\ncashLabel.TextColor3 = Color3.new(0.666667, 1, 0) -- Sets the text color to green\ncashLabel.Font = Enum.Font.Cartoon -- Sets the Font\ncashLabel.TextScaled = true -- Scales the text to fit the label size\ncashLabel.LayoutOrder = 1 -- Sets the order for layout\ncashLabel.Parent = frame -- Parents it to the frame\n\n-- Create the main inventory frame (scrollable) inside the GUI frame\nlocal scrollingFrame = Instance.new(\"ScrollingFrame\") -- Creates a new ScrollingFrame for scrollable items\nscrollingFrame.Name = \"InventoryFrame\" -- Names it \"InventoryFrame\" for identification\nscrollingFrame.Size = UDim2.new(1, 0, 0.8, 0) -- Sets the size to 100% of the frame width and 80% of its height\nscrollingFrame.BackgroundColor3 = Color3.new(0, 0, 0) -- Sets the background color to black\nscrollingFrame.BackgroundTransparency = 0.5 -- Makes the background semi-transparent (50% opacity)\nscrollingFrame.ScrollBarThickness = 8 -- Sets the thickness of the scrollbar\nscrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Initial canvas size for scrolling (auto-adjusts)\nscrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Automatically adjusts the canvas height based on content\nscrollingFrame.LayoutOrder = 2 -- Sets the order for layout\nscrollingFrame.Parent = frame -- Parents it to the frame\n\n-- Create a layout for scrollable items within the scrolling frame\nlocal itemLayout = Instance.new(\"UIListLayout\") -- Creates a new UIListLayout for organizing items\nitemLayout.Padding = UDim.new(0, 5) -- Adds 5 pixels of padding between items\nitemLayout.Parent = scrollingFrame -- Parents it to the scrolling frame\n\n-- Fetch items from the server\nlocal GetItems = game.ReplicatedStorage:WaitForChild(\"GetItems\") -- Gets the GetItems RemoteEvent from ReplicatedStorage\nlocal allItems = nil -- Initializes a variable to store the items table\n\nGetItems:FireServer() -- Sends a request to the server to get the items\nGetItems.OnClientEvent:Connect(function(itemsData) -- Listens for the response from the server\n    allItems = itemsData -- Stores the received items table for later use\nend)\n\nlocal collectSounds = {\n    \"rbxassetid://6586979979\",\n    --\"rbxassetid://..\"\n}\n\n-- Create and store sound instances once on the client for item collection\nlocal sounds = {} -- Initializes an empty table to store sound instances\nfor _, soundId in pairs(collectSounds) do -- Loops through the list of sound IDs\n    local sound = Instance.new(\"Sound\") -- Creates a new Sound object\n    sound.SoundId = soundId -- Sets the sound ID from the list\n    sound.Parent = player.PlayerGui -- Parents the sound to PlayerGui for client-side playback\n    sound.Looped = false -- Ensures the sound doesn\u2019t loop\n    sound.Volume = 0.5 -- Sets the volume (optional, default is 1)\n    table.insert(sounds, sound) -- Adds the sound to the sounds table\nend\n\n-- Track inventory and cash for the player\nlocal inventory = {} -- Initializes an empty table to track collected items\nlocal totalCash = 0 -- Initializes the total cash to zero\n\n-- Handle item collection from server event\nlocal ItemCollected = game.ReplicatedStorage:WaitForChild(\"ItemCollected\") -- Gets the ItemCollected RemoteEvent from ReplicatedStorage\nItemCollected.OnClientEvent:Connect(function(item) -- Listens for when an item is collected on the client\n    if item then -- Ensures an item was received\n        local randomSound = sounds[math.random(1, #sounds)] -- Randomly selects a sound from the sounds table\n        randomSound:Play() -- Plays the selected sound for item collection\n\n        -- Add item to inventory (create GUI elements)\n        local itemFrame = Instance.new(\"Frame\") -- Creates a new Frame for the item in the inventory\n        itemFrame.Size = UDim2.new(1, 0, 0.1, 0) -- Sets the size to 100% of the scrolling frame width and 10% of its height\n        itemFrame.BackgroundColor3 = Color3.new(0.121569, 0.121569, 0.121569) -- Sets the background color to dark gray\n        itemFrame.BackgroundTransparency = 0.6 -- Makes the background semi-transparent (60% opacity)\n        itemFrame.Parent = scrollingFrame -- Parents it to the scrolling frame for display\n\n        local image = Instance.new(\"ImageLabel\") -- Creates an ImageLabel for the item\u2019s image\n        image.Size = UDim2.new(0.3, 0, 1, 0) -- Sets the size to 30% of the item frame width and 100% of its height\n        image.Position = UDim2.new(0, 0, 0, 0) -- Positions it at the top-left of the item frame\n        image.Image = item.image -- Sets the image from the item data\n        image.BackgroundTransparency = 1 -- Makes the background fully transparent\n        image.ScaleType = Enum.ScaleType.Fit -- Ensures the image fits within the label while maintaining aspect ratio\n        image.Parent = itemFrame -- Parents it to the item frame\n\n        local nameLabel = Instance.new(\"TextLabel\") -- Creates a TextLabel for the item\u2019s name\n        nameLabel.Size = UDim2.new(0.7, 0, 1, 0) -- Sets the size to 70% of the item frame width, full height\n        nameLabel.Position = UDim2.new(0.3, 0, 0, 0) -- Positions it to the right of the image (30% from left)\n        nameLabel.Text = item.name -- Sets the text to the item\u2019s name\n        nameLabel.TextColor3 = Color3.new(1, 1, 1) -- Sets the text color to white\n        nameLabel.BackgroundTransparency = 1 -- Makes the background fully transparent\n        nameLabel.Font = Enum.Font.Cartoon -- Uses a cartoon-style font for a playful look\n        nameLabel.TextScaled = true -- Scales the text to fit the label size\n        nameLabel.Parent = itemFrame -- Parents it to the item frame\n\n        -- Track the item in inventory by adding it to the list to prevent duplicates\n        table.insert(inventory, item) -- Adds the item to the inventory table\n        totalCash = totalCash + (item.value or 0) -- Adds the item\u2019s value to the total cash (defaults to 0 if no value)\n        cashLabel.Text = \"Cash: $\" .. totalCash -- Updates the cash label with the new total\n    end\nend)\n</code></pre> </li> </ul>"},{"location":"pages/export/","title":"Export","text":"<p>On the Export page, data files can be exported in multiple ways.</p> <ul> <li>Select a data file that you want to export</li> </ul> DataStoreAPIFile <p></p> <ul> <li>Enter new or existing DataStore name</li> <li>Enter new or existing Key</li> <li>Click \"Export\" </li> </ul> <p>Tip</p> <p>To quickly check the saved data, you can use the Roda Tool \"Get DataStore Data\". Insert the Datastore name and click \"Print\".</p> <p></p> <ul> <li>Select JSON or CSV as Format</li> <li>Enter the URL of your API's export route</li> <li>Optionally, add custom HTTP headers if needed</li> <li>Click \"POST\"</li> </ul> Outgoing Data Examples <ul> <li> <p>JSON <pre><code>[\n    {\n        \"id\": 1,\n        \"miningTime\": 0.375,\n        \"salvageableMats\": \"\",\n        \"upgradePathId\": 12\n        \"isUpgradable\": true,\n    },\n    {\n        \"id\": 2,\n        \"miningTime\": 1.25,\n        \"salvageableMats\": \"\",\n        \"upgradePathId\": 14\n        \"isUpgradable\": true,\n    }\n]\n</code></pre></p> </li> <li> <p>CSV <pre><code>id;miningTime;salvageableMats;upgradePathId;isUpgradable\n1;0.375;;12;true\n2;1.25;;14;true\n</code></pre></p> </li> </ul> <p>Set up an API</p> <p>If you need help creating an API, check out: Example - Google Sheets API</p> <p></p> <ul> <li>Select JSON or CSV as Format and click \"Export\"<ul> <li>The exported file will be parented to the selected data file.</li> <li>The exported file is a ModuleScript with a string of either JSON or CSV data.</li> </ul> </li> </ul> <p>CSV Delimiter</p> <p>The CSV delimiter can be edited in Global Settings</p>"},{"location":"pages/global-settings/","title":"Global Settings","text":"<p>You can modify Roda's global settings in this section.</p> <p></p>"},{"location":"pages/home/","title":"Home","text":""},{"location":"pages/home/#new-project","title":"New Project","text":"<ul> <li>Enter a name for your project in the provided field.</li> <li>Press \"Enter\" or click the  button to create the project.</li> </ul>"},{"location":"pages/home/#load-project-from-datastore","title":"Load Project from DataStore","text":"<p>The Load Project from DataStore feature in Roda enables you to manage and synchronize project configurations across different scenarios, ensuring flexibility in both solo and collaborative workflows. Below are the two primary use cases:</p>"},{"location":"pages/home/#synchronize-configurations-in-team-create","title":"Synchronize Configurations in Team Create","text":"<p>Manual synchronization of project configurations among developers in Team Create. When working collaboratively, developers can save the Project Settings to the DataStore and share them with the team. Other developers can then load these settings to align their configurations, ensuring consistency across the team. Once all team members share the same project configuration, any changes to data file configurations or edits to the data itself are automatically synced to everyone. This means that if one developer updates a configuration or modifies data, those updates are reflected for all other team members with the same project setup. The initial sharing of the project configuration is done manually, but after that, the plugin handles synchronization automatically.</p>"},{"location":"pages/home/#transfer-project-configurations-between-machines","title":"Transfer Project Configurations Between Machines","text":"<p>This also enables you to transfer a project configuration between different computers. All settings are stored locally, and every project is accessible across all experiences. If you work on multiple machines and need to access a specific project on another computer, you can save the Project Settings to the DataStore from your initial machine and then load them on the second machine within the same Roblox experience.</p>"},{"location":"pages/import/","title":"Import","text":"<p>On the Import page, data files can be imported in multiple ways.</p> <ul> <li>Select a data file that you want to import data into</li> </ul> DataStoreAPIFile <p></p> <ul> <li>Enter an existing DataStore name</li> <li>Enter an existing Key</li> <li>Click \"Import\"</li> </ul> <p></p> <ul> <li>Select JSON or CSV as Format</li> <li>Enter the URL of your API's import route</li> <li>Optionally, add custom HTTP headers if needed</li> <li>Click \"GET\"</li> </ul> Expected Data Example <ul> <li> <p>JSON <pre><code>[\n    {\n        \"id\": 1,\n        \"miningTime\": 0.375,\n        \"salvageableMats\": \"\",\n        \"upgradePathId\": 12\n        \"isUpgradable\": true,\n    },\n    {\n        \"id\": 2,\n        \"miningTime\": 1.25,\n        \"salvageableMats\": \"\",\n        \"upgradePathId\": 14\n        \"isUpgradable\": true,\n    }\n]\n</code></pre></p> </li> <li> <p>CSV <pre><code>id;miningTime;salvageableMats;upgradePathId;isUpgradable\n1;0.375;;12;true\n2;1.25;;14;true\n</code></pre></p> </li> </ul> <p>Set up an API</p> <p>If you need help creating an API, check out: Example - Google Sheets API</p> <p></p> <ul> <li>Select the Format</li> <li>Select a file in the Explorer that contains the data you want to import</li> <li>Click \"Pick\" to set it and finally click \"Import\"</li> </ul> <p>CSV Delimiter</p> <p>The CSV delimiter can be edited in Global Settings</p> Side Effect... <p>A side effect of importing a ModuleScript is that it can essentially act as a script executor. For instance, if this were the content of the ModuleScript you\u2019re importing:     <pre><code>local module = {}\n\nlocal function doSomething()\n    print(\"This can be used as a script runner...\")\nend\n\ndoSomething()\n\nreturn module\n</code></pre> Alongside a warning indicating that no data can be imported, you\u2019ll see this message printed in the Studio Output: 'This can be used as a script runner...'</p> <p>No data would be imported into the selected target data file, so it remains unchanged. However, because <code>require()</code> is called on the ModuleScript you\u2019re importing, its code will execute. This allows you to run custom scripts or functions in Studio.   That said, be careful not to select a file that could potentially harm your code or project when executed with require().</p>"},{"location":"pages/project-settings/","title":"Project Settings","text":""},{"location":"pages/project-settings/#project-name-and-icon","title":"Project Name and Icon","text":"<p>You can edit both the project name and icon.</p> <p></p>"},{"location":"pages/project-settings/#adding-a-data-file-configuration","title":"Adding a Data File Configuration","text":"<p>To add a data file configuration, </p> <ul> <li>create a ModuleScript in Studio to serve as the data file (source file).</li> <li>Name the ModuleScript as you like. </li> <li>Then click the  button in the \"Data File Configs\" section. </li> <li>And finally select the data file configuration and (with the ModuleScript selected in Explorer) click  to set the path to the selected file.</li> </ul> <p></p> <p>To add a data file configuration, </p> <p>- create a ModuleScript in Studio to serve as the data file (source file).</p> <p>- Name the ModuleScript as you like.</p> <p>- Then click the + button in the 'Data File Configs' section. </p> <p>- And finally select the data file configuration and (with the ModuleScript selected in Explorer) click 'Pick' to set the path to the selected file.</p> <p>Important Notes</p> <p>Once set, the data file path cannot be changed. To use a different data file, you must delete the data file configuration and create a new one. When you \"Pick\" a selected ModuleScript in the Explorer, its contents will be backed up (if enabled in Global Settings) and cleared. If the file is already in use in another data file configuration, you cannot set it here - a warning will appear in the Studio output, indicating which project and data file configuration is using it.</p>"},{"location":"pages/project-settings/#specifying-the-table-type","title":"Specifying the Table Type","text":"<p>After setting the data file, you need to specify its table type. By default, Array is selected.</p> <ul> <li>Array: Refers to a sequential Lua table.</li> <li>Dict: Represents a dictionary or hashmap structure (with only strings available as primary keys).</li> </ul> <p></p> <p>After setting the data file, you need to specify its table type. By default, Array is selected.</p> <p>- Array: Refers to a sequential Lua table.</p> <p>- Dict: Represents a dictionary or hashmap structure (with only strings available as primary keys).</p> <p>Please note that this setting cannot be changed later. Once the first property is created, the table type is locked.</p> <p>Important Notes</p> <p>This setting cannot be changed later. Once the first property is created, the table type is locked.</p>"},{"location":"pages/project-settings/#setting-a-secondary-data-file-optional","title":"Setting a Secondary Data File <code>optional</code>","text":"<p>You can set a secondary data file. The data from the main file will also be written to this additional one.</p> <p></p>"},{"location":"pages/project-settings/#setting-an-image-pool-optional","title":"Setting an Image Pool <code>optional</code>","text":"<p>You can set an image pool, which can be:</p> <ul> <li>A ModuleScript containing image IDs.</li> <li>Or a folder containing Decals, ImageLabels, Textures or ModuleScripts (containing image IDs).</li> </ul> <p>After creating an image property in the data file settings (add a property, set its data type to string, and choose 'T.Box with Image Selection' as the UI Element), you can quickly assign images to items on the editor page.</p> <p></p> <p>You can set an image pool, which can be:</p> <p>- A ModuleScript containing image IDs.</p> <p>- Or a folder containing Decals, ImageLabels, Textures or ModuleScripts (containing image IDs).</p> <p>After creating an image property in the data file settings (add a property, set its data type to string, and choose 'T.Box with Image Selection' as the UI Element), you can quickly assign images to items on the editor page.</p>"},{"location":"pages/project-settings/#adding-properties","title":"Adding Properties","text":"<p>You can add properties to the data file configuration in several ways:</p> <ul> <li> <p>Click the  button in the \"Data File Settings\" section, then specify the key name, value data type, default value and UI element. </p> </li> <li> <p>From Common Game-Related Properties - Select from a collection of pre-defined, game-related properties. </p> </li> <li> <p>By Parsing Code: Import properties by parsing existing Lua code, such as an item table with multiple properties, to quickly add them. </p> </li> </ul> <p>Editing Properties</p> <p>You can reorder properties, which affects how items are displayed in the editable area and in the tabs on the Editor page. Note that only the first four properties of each item are visible in the tabs.</p> <p>You can also edit properties even after adding items to the data file. However, exercise caution, as this can lead to data loss in the current source file (though data is backed up if enabled in Global Settings). For example:</p> <p>If you rename the key of a property, all values associated with that key in the source file will be reset to their default values, and the previous key\u2019s values will be removed. Changing primary keys can be particularly problematic, potentially requiring tedious data restoration. Be especially careful with these changes.</p> <p>Naming Keys</p> <p>Key names can only contain letters (A-Z, a-z), digits (0-9), and underscores, and cannot start with a digit. More info</p> <p>Values</p> <ul> <li>String values (on the Edit page) may include any characters except for square brackets -&gt; [ ]</li> <li>In the Data File Settings, default values for properties with string value types are additionally restricted from using \" and \\ characters.</li> </ul>"},{"location":"pages/project-settings/#dropdown-properties","title":"Dropdown Properties","text":"<p>When you choose Dropdown as a UI Element of a property, you must also define its source. The source can be either:</p> <ul> <li>A list of manually defined values</li> </ul> <p></p> <ul> <li>Or a reference to another data file\u2019s key (acting as a foreign key), drawing its options from the values created in that other file.</li> </ul> <p></p> <p></p>"},{"location":"pages/project-settings/#display-dropdown-as-a-tab","title":"Display Dropdown as a Tab","text":"<p>For Dropdown UI Elements, there\u2019s an option in the \"Data File Settings\" to display them as additional tabs on the editor page. This feature allows you to click on a value within the tab to list all associated items.</p> <p></p>"},{"location":"pages/project-settings/#copying-an-existing-data-file-configuration","title":"Copying an Existing Data File Configuration","text":"<p>You can copy an existing data file configuration from any project. This process:</p> <ul> <li>Backs up the current data file source (if enabled in Global Settings) and clears it.</li> <li>Imports the properties and table type (Array or Dict) from the copied data file.</li> <li>Retains other settings, such as the selected data file source, additional data file, and image pool, as they are.</li> </ul> <p>This feature is useful for organizational purposes, such as splitting a main items table into separate data files (e.g., weapons, consumables) while maintaining identical properties that can be combined into a single table at runtime. It can also serve as a templating tool \u2014 for example, creating a template for NPCs and copying it wherever needed.</p> <p></p>"},{"location":"pages/project-settings/#generating-table-assembler-code","title":"Generating Table Assembler Code","text":"<p>You can generate code that will assemble the table at runtime including all related tables adding them as nested tables by default. The generated code can be easily adjusted to construct complex types instead of nested tables!</p> <ul> <li>See this post in the dev forum for details: Update</li> </ul>"},{"location":"pages/project-settings/#backing-up-the-data-file","title":"Backing Up the Data File","text":"<p>You can manually back up the data file by clicking the \"Backup Data File\" button. This creates a backup of the actual data (not the configuration) and saves it to the specified folder (default: ServerStorage.Backup, editable in Global Settings).</p> <p></p>"},{"location":"pages/project-settings/#backing-up-the-project","title":"Backing Up the Project","text":"<p>You can save the entire project configuration, including all data file configurations (but not the source files data) to the DataStore.</p> <p></p> <p>Note</p> <p>The experience must be saved to Roblox, and Studio API services must be enabled in the game settings.</p> <p>This feature is designed to synchronize project configurations in Team Create or between different machines: Load Project from DataStore</p> <ul> <li>An option was added to export an project configuration to JSON. See this post in the dev forum for details: Update</li> </ul>"},{"location":"pages/project-settings/#delete-data-file-configuration-project","title":"Delete Data File Configuration / Project","text":"<ul> <li>Delete the Data File Configuration</li> </ul> <ul> <li>Delete the Project including all Data File Configurations</li> </ul> <p>Note</p> <p>In both cases only the configuration is removed. The source data files remain untouched.</p>"},{"location":"pages/tools/","title":"Tools","text":"<p>Roda offers several handy tools that operate independently of any specific project or data file.</p>"},{"location":"pages/tools/#restore-names","title":"Restore Names","text":""},{"location":"pages/tools/#get-datastores","title":"Get DataStores","text":""},{"location":"pages/tools/#get-datastore-data","title":"Get DataStore Data","text":""},{"location":"pages/tools/#view-images","title":"View Images","text":"<p>In Explorer, select a folder with images or a ModuleScript with imageIDs and click \"View\" to browse the images.</p> <p></p>"},{"location":"snippets/GoogleSheetsCredentials/","title":"GoogleSheetsCredentials","text":""},{"location":"snippets/GoogleSheetsCredentials/#obtaining-google-sheets-credentials-file-and-required-permissions","title":"Obtaining Google Sheets Credentials File and Required Permissions","text":"<ol> <li> <p>Create a Google Cloud Project</p> <ul> <li>Go to the Google Cloud Console</li> <li>Sign in with your Google account (ensure it\u2019s the account you\u2019ll use for Google Sheets access).</li> <li>Click the \"Select a Project\" button (top left) and click \"New Project\" in the popup.</li> <li>Name your project (e.g., \"RodaSheetsAPI\"), click \"Create,\" and wait for it to set up.</li> </ul> </li> <li> <p>Enable the Google Sheets API</p> <ul> <li>In the Google Cloud Console, navigate to \"APIs &amp; Services\" &gt; \"Library\".</li> <li>Search for \"Google Sheets API\", select it, and click \"Enable\" to activate it for your project.</li> </ul> </li> <li> <p>Create a Service Account</p> <ul> <li>Go to \"APIs &amp; Services\" &gt; \"Credentials\" in the Google Cloud Console.</li> <li>Click \"+ Create Credentials\" &gt; \"Service account\".</li> <li>Enter a \"Service account name\" (e.g., \"RodaServiceAccount\").</li> <li>Click \"Create and Continue\".</li> <li>Skip the \"Grant this service account access to project\" step (optional permissions can be added later if needed).</li> <li>Click \"Done\" to create the service account.</li> <li>You\u2019ll see the service account listed. Note the email address, you\u2019ll need it later.</li> </ul> </li> <li> <p>Generate a JSON Key for the Service Account</p> <ul> <li>From the service account list, click on the service account you created.</li> <li>Go to the \"Keys\" tab, then click \"Add Key\" &gt; \"Create new key\".</li> <li>Select \"JSON\" as the key type and click \"Create\".</li> <li>A JSON file will download automatically. Save this file securely.</li> <li>This JSON file contains the credentials (client email, private key, etc.) needed for your Python script to authenticate with Google Sheets.</li> </ul> </li> <li> <p>Share the Google Sheet with the Service Account</p> <ul> <li>Go to Google Sheets and create a new file (Blank spreadsheet).</li> <li>Note the sheetId from the url: https://docs.google.com/spreadsheets/d/THIS_PART/edit</li> <li>Click the \"Share\" button (top-right corner).</li> <li>Add the service account email (service account email we noted earlier) as an editor.</li> <li>Set the permission to \"Editor\"</li> <li>Click \"Send\" or \"Done\" to grant access.</li> </ul> </li> <li> <p>Required Permissions and Rights</p> <ul> <li>Use the scope https://www.googleapis.com/auth/spreadsheets for read/write access to Google Sheets.</li> <li> <p>In the Python script (see next Tab), ensure the scope variable includes the above value when authorizing with gspread:</p> <pre><code>scope = ['https://www.googleapis.com/auth/spreadsheets']\n</code></pre> </li> </ul> </li> <li> <p>Use the Credentials in the Python Script</p> <ul> <li>Update your PATH_CREDENTIALS in the Python script to point to the JSON file\u2019s location (e.g., c:/path_to_creds/credentials_file_we_downloaded_earlier.json).</li> </ul> </li> <li> <p>Done</p> <ul> <li>Set up the script (next tab) and run your API.</li> </ul> </li> </ol>"}]}